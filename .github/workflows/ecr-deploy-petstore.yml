name: Build, Push to ECR, Deploy to EC2
# updated with validation + safer IMAGE_URI handling

on:
  push:
   branches: ["main"]     # manual only; change to ["main"] when ready
  workflow_dispatch:

env:
  # Pull values from repo/org Variables (Settings → Secrets and variables → Actions → Variables)
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPO: ${{ vars.ECR_REPO }}
  IMAGE_TAG: latest
  DEPLOY_TAG_KEY: ${{ vars.DEPLOY_TAG_KEY }}
  DEPLOY_TAG_VALUE: ${{ vars.DEPLOY_TAG_VALUE }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Validate required vars are present
        run: |
          set -e
          MISSING=()
          for v in AWS_ACCOUNT_ID AWS_REGION ECR_REPO IMAGE_TAG; do
            if [ -z "${!v:-}" ]; then MISSING+=("$v"); fi
          done
          # DEPLOY_TAG_* not needed for this job, so don't fail here on them
          if [ ${#MISSING[@]} -gt 0 ]; then
            echo "Missing required variables: ${MISSING[*]}"
            echo "Set them under: GitHub → Repo → Settings → Secrets and variables → Actions → Variables"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Compute IMAGE_URI for this run
        run: |
          echo "IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}" >> "$GITHUB_ENV"

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPO" >/dev/null

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_URI }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Validate deploy vars are present
        run: |
          set -e
          MISSING=()
          for v in AWS_ACCOUNT_ID AWS_REGION ECR_REPO IMAGE_TAG DEPLOY_TAG_KEY DEPLOY_TAG_VALUE; do
            if [ -z "${!v:-}" ]; then MISSING+=("$v"); fi
          done
          if [ ${#MISSING[@]} -gt 0 ]; then
            echo "Missing required variables for deploy: ${MISSING[*]}"
            echo "Set them under: GitHub → Repo → Settings → Secrets and variables → Actions → Variables"
            exit 1
          fi
          echo "IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}" >> "$GITHUB_ENV"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Find instances by tag
        id: find
        run: |
          set -euo pipefail
          echo "Looking for instances with tag ${DEPLOY_TAG_KEY}=${DEPLOY_TAG_VALUE} in ${AWS_REGION}"
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:${DEPLOY_TAG_KEY},Values=${DEPLOY_TAG_VALUE}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "${INSTANCE_IDS}" ]; then
            echo "No running instances found with ${DEPLOY_TAG_KEY}=${DEPLOY_TAG_VALUE}"
            exit 1
          fi
          echo "Targeting instances: ${INSTANCE_IDS}"
          echo "instance_ids=${INSTANCE_IDS}" >> "$GITHUB_OUTPUT"

      - name: Deploy via SSM (clean quoting, env passthrough)
        id: ssm
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          ECR_REPO: ${{ env.ECR_REPO }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          INSTANCE_IDS: ${{ steps.find.outputs.instance_ids }}
          DEBUG: "1"
        run: |
          set -euo pipefail
          [ "${DEBUG}" = "1" ] && set -x || true

          REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"

          # Build the remote script literally
          REMOTE_SCRIPT="$(cat <<'EOS'
          #!/bin/bash
          set -euo pipefail
          [ "${DEBUG:-}" = "1" ] && set -x || true

          echo "=== ENV ==="
          echo "AWS_REGION=${AWS_REGION}"
          echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}"
          echo "REPO=${REPO}"

          if ! command -v docker >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y docker.io awscli
              sudo systemctl enable --now docker || true
            elif command -v yum >/dev/null 2>&1; then
              sudo yum install -y docker awscli || true
              sudo systemctl enable --now docker || true
            fi
          fi

          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin \
              "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

          docker pull "$REPO"
          docker stop petstore || true
          docker rm petstore || true
          docker run -d --name petstore --restart unless-stopped -p 80:5000 "$REPO"
          EOS
          )"

          echo "----- REMOTE_SCRIPT (first 20 lines) -----"
          echo "$REMOTE_SCRIPT" | head -n 20
          echo "-----------------------------------------"

          PARAMS_JSON=$(jq -nc --arg script "$REMOTE_SCRIPT" \
            '{commands: [$script], executionTimeout: ["3600"], workingDirectory: ["~"]}')

          echo "Sending SSM command to: ${INSTANCE_IDS}"
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy petstore-api container" \
            --parameters "$PARAMS_JSON" \
            --instance-ids ${INSTANCE_IDS} \
            --region "${AWS_REGION}" \
            --output text \
            --query "Command.CommandId")

          echo "command_id=${COMMAND_ID}" >> "$GITHUB_OUTPUT"

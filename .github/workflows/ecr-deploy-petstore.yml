name: Build, Push to ECR, Deploy to EC2
# updated with validation + safer IMAGE_URI handling

on:
  push:
    branches: ["main"]     # manual only; change to ["main"] when ready
  workflow_dispatch:

env:
  # Pull values from repo/org Variables (Settings → Secrets and variables → Actions → Variables)
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPO: ${{ vars.ECR_REPO }}
  IMAGE_TAG: latest
  DEPLOY_TAG_KEY: ${{ vars.DEPLOY_TAG_KEY }}
  DEPLOY_TAG_VALUE: ${{ vars.DEPLOY_TAG_VALUE }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Validate required vars are present
        run: |
          set -e
          MISSING=()
          for v in AWS_ACCOUNT_ID AWS_REGION ECR_REPO IMAGE_TAG; do
            if [ -z "${!v:-}" ]; then MISSING+=("$v"); fi
          done
          # DEPLOY_TAG_* not needed for this job, so don't fail here on them
          if [ ${#MISSING[@]} -gt 0 ]; then
            echo "Missing required variables: ${MISSING[*]}"
            echo "Set them under: GitHub → Repo → Settings → Secrets and variables → Actions → Variables"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Compute IMAGE_URI for this run
        run: |
          echo "IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}" >> "$GITHUB_ENV"

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPO" >/dev/null

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_URI }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Validate deploy vars are present
        run: |
          set -e
          MISSING=()
          for v in AWS_ACCOUNT_ID AWS_REGION ECR_REPO IMAGE_TAG DEPLOY_TAG_KEY DEPLOY_TAG_VALUE; do
            if [ -z "${!v:-}" ]; then MISSING+=("$v"); fi
          done
          if [ ${#MISSING[@]} -gt 0 ]; then
            echo "Missing required variables for deploy: ${MISSING[*]}"
            echo "Set them under: GitHub → Repo → Settings → Secrets and variables → Actions → Variables"
            exit 1
          fi
          echo "IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}" >> "$GITHUB_ENV"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Find instances by tag
        id: find
        run: |
          set -euo pipefail
          echo "Looking for instances with tag ${DEPLOY_TAG_KEY}=${DEPLOY_TAG_VALUE} in ${AWS_REGION}"
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:${DEPLOY_TAG_KEY},Values=${DEPLOY_TAG_VALUE}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "${INSTANCE_IDS}" ]; then
            echo "No running instances found with ${DEPLOY_TAG_KEY}=${DEPLOY_TAG_VALUE}"
            exit 1
          fi
          echo "Targeting instances: ${INSTANCE_IDS}"
          echo "instance_ids=${INSTANCE_IDS}" >> "$GITHUB_OUTPUT"

      - name: Deploy via SSM (pull new image and restart container)
        id: ssm
        env:
          REPO_URI: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
        run: |
          set -euo pipefail
          REPO="${REPO_URI}:${IMAGE_TAG}"

          # Build JSON array of commands locally for substitution safety
          COMMANDS=$(jq -cn --arg region "$AWS_REGION" --arg account "$AWS_ACCOUNT_ID" --arg repo "$REPO" '
            [
              "set -euo pipefail",
              # Install Docker if missing (Ubuntu, Amazon Linux, or AL2023)
              "(command -v docker >/dev/null 2>&1) || { \
                 (command -v apt-get >/dev/null 2>&1 && sudo apt-get update -y && sudo apt-get install -y docker.io && sudo systemctl enable --now docker) || \
                 (command -v dnf >/dev/null 2>&1 && sudo dnf install -y docker && sudo systemctl enable --now docker) || \
                 (command -v yum >/dev/null 2>&1 && sudo yum install -y docker && sudo systemctl enable --now docker) || true; }",
              # ECR login using instance role
              "aws ecr get-login-password --region \($region) | docker login --username AWS --password-stdin \($account).dkr.ecr.\($region).amazonaws.com",
              # Pull and (re)run the container
              "docker pull \($repo)",
              "docker stop petstore || true",
              "docker rm petstore || true",
              "docker run -d --name petstore --restart unless-stopped -p 80:5000 \($repo)"
            ]')

          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy petstore-api container" \
            --parameters "commands=${COMMANDS}" \
            --instance-ids ${{ steps.find.outputs.instance_ids }} \
            --query "Command.CommandId" --output text)

          echo "command_id=${COMMAND_ID}" >> "$GITHUB_OUTPUT"

      - name: Wait for SSM result
        run: |
          set -euo pipefail
          for ID in ${{ steps.find.outputs.instance_ids }}; do
            aws ssm wait command-executed --command-id "${{ steps.ssm.outputs.command_id }}" --instance-id "$ID"
            STATUS=$(aws ssm get-command-invocation --command-id "${{ steps.ssm.outputs.command_id }}" --instance-id "$ID" --query "Status" --output text)
            echo "Instance $ID status: $STATUS"
            if [ "$STATUS" != "Success" ]; then
              echo "Deployment failed on $ID"
              exit 1
            fi
          done
